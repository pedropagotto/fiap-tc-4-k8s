name: .NET

on: 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
        # - name: hello
        #   run: echo "hello"
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install required workloads
        run: dotnet workload install aspire

      - name: Restore dependencies
        run: |
          cd ./Aspire
          dotnet restore TC-03.sln

      - name: Build
        run: |
          cd ./Aspire
          dotnet build TC-03.sln --configuration Release --no-restore

      - name: Test
        run: |
          cd ./Aspire
          dotnet test TC-03.sln

  docker_images:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Modify AuthApi appsettings.json
        run: |
          cd ./AuthApi
          jq '.ConnectionStrings.techchallenge01 = "${{ secrets.CONNECTION_STRING }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          cat appsettings.json
          cd ..
      
      - name: Modify ContactReadApi appsettings.json
        run: |
          cd ./ContactReadApi
          jq '.ConnectionStrings.techchallenge01 = "${{ secrets.CONNECTION_STRING }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          cat appsettings.json
          cd ..
      
      - name: Modify ContactApi appsettings.json
        run: |
          cd ./ContactApi
          jq '.ConnectionStrings.techchallenge01 = "${{ secrets.CONNECTION_STRING }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          
          jq '.RabbitMQConnection.Host = "${{ secrets.HOST }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          jq '.RabbitMQConnection.Username = "${{ secrets.USERNAME }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          jq '.RabbitMQConnection.Password = "${{ secrets.PASSWORD }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          cat appsettings.json
          cd ..

      - name: Modify ContactWorker appsettings.json
        run: |
          cd ./ContactWorker
          jq '.ConnectionStrings.techchallenge01 = "${{ secrets.CONNECTION_STRING }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          
          jq '.RabbitMQConnection.Host = "${{ secrets.HOST }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          jq '.RabbitMQConnection.Username = "${{ secrets.USERNAME }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          jq '.RabbitMQConnection.Password = "${{ secrets.PASSWORD }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json

          jq '.elasticsearch.cloudId = "${{ secrets.CLOUDID }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          jq '.elasticsearch.apiKey = "${{ secrets.APIKEY }}"' appsettings.json > tmp.json && mv tmp.json appsettings.json
          cat appsettings.json
          cd ..

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker AuthApi image
        run: |
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/tc-auth-api:latest -f AuthApi/Dockerfile .
          docker push ${{ vars.DOCKERHUB_USERNAME }}/tc-auth-api:latest
      
      - name: Build and push Docker ContactApi image
        run: |
            docker build -t ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-api:latest -f ContactApi/Dockerfile .
            docker push ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-api:latest

      - name: Build and push Docker ContactReadApi image
        run: |
            docker build -t ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-read-api:latest -f ContactReadApi/Dockerfile .
            docker push ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-read-api:latest
      
      - name: Build and push Docker ContactWorker image
        run: |
            docker build -t ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-worker:latest -f ContactWorker/Dockerfile .
            docker push ${{ vars.DOCKERHUB_USERNAME }}/tc-contact-worker:latest
   